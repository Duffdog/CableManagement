@page "/"
@inject HttpClient Http

<h3>Dimensionnement du cheminement</h3>

@if (_cableTypes == null)
{
    <p>Chargement des données...</p>
}
else
{
    <div class="mb-3">
        <label>Type de conduit</label>
        <select class="form-select" @bind="_conduitType">
            <option value="chemin">Chemin de câble</option>
            <option value="fourreau">Fourreau</option>
        </select>
    </div>

    <button class="btn btn-success mb-3" @onclick="AjouterCable">Ajouter un câble</button>
    <EditForm Model="@this">
        <div class="card">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label>Réserve souhaitée (%)</label>
                        <input type="number" class="form-control" min="0" max="100" @bind="_reservePercent" />
                    </div>
                    <div class="col-md-3">
                        <label>Nombre de couches</label>
                        <input type="number" class="form-control" min="1" max="9" @bind="_nombreCouches" />
                    </div>
                </div>
                @foreach (var (cable, idx) in _cables.Select((c, i) => (c, i)))
                {
                    <div class="row mb-2 align-items-end" key="@idx">
                        <div class="col-md-3">
                            <label>Type</label>
                            <select class="form-select" @onchange="e => OnTypeChanged(e, idx)">
                                <option disabled selected value>-- Type --</option>
                                @foreach (var type in _cableTypes)
                                {
                                    <option value="@type.Type" selected="@(cable.Type == type.Type)">
                                        @type.Type
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label>Référence</label>
                            <select class="form-select" @onchange="e => OnReferenceChanged(e, idx)" disabled="@string.IsNullOrEmpty(cable.Type)">
                                <option disabled selected value>-- Référence --</option>
                                @foreach (var reference in _cableTypes.FirstOrDefault(t => t.Type == cable.Type)?.References ?? new List<CableReference>())
                                {
                                    <option value="@reference.Designation" selected="@(cable.Designation == reference.Designation)">
                                        @reference.Designation
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label>Diamètre (mm)</label>
                            <input class="form-control" value="@cable.DiameterMm" readonly />
                        </div>
                        <div class="col-md-2">
                            <label>Quantité</label>
                            <input type="number" class="form-control" min="1" @bind="cable.Quantity" />
                        </div>
                        <div class="col-md-1">
                            <button class="btn btn-danger" @onclick="() => SupprimerCable(idx)" disabled="@(_cables.Count == 1)">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </EditForm>

    <button class="btn btn-primary mt-3" @onclick="CalculerEncombrement">Calculer encombrement</button>

    @if (_occupancy > 0)
    {
        <div class="mt-4">
            <h5>Résultats</h5>
            <p>Encombrement total : <b>@_occupancy.ToString("0.00") cm²</b></p>
            <p>Encombrement avec réserve : <b>@_adjustedOccupancy.ToString("0.00") cm²</b></p>

            @if (_selectedTray != null && _conduitType == "chemin")
            {
                <div class="alert alert-success mt-3">
                    <h5>Chemin de câble recommandé :</h5>
                    <p>
                        Niedax H @_selectedTray.Height mm x L @_selectedTray.Width mm
                        (Section utile : @_selectedTray.SectionUtilisable.ToString("0.0") cm²)
                    </p>
                    <p>
                        Taux de remplissage (avec réserve) :
                        @((_adjustedOccupancy * 100 / _selectedTray.SectionUtilisable).ToString("0.0"))%
                    </p>
                </div>
            }
            else if (_selectedFourreau != null && _conduitType == "fourreau")
            {
                <div class="alert alert-success mt-3">
                    <h5>Fourreau recommandé :</h5>
                    <p>
                        Diamètre intérieur : @_selectedFourreau.DiametreMm mm
                        (Section utile : @_selectedFourreau.SectionUtilisable.ToString("0.0") cm²)
                    </p>
                    <p>
                        Taux de remplissage (avec réserve) :
                        @((_adjustedOccupancy * 100 / _selectedFourreau.SectionUtilisable).ToString("0.0"))%
                    </p>
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-3">
                    Aucun conduit standard ne convient. Prévoir un conduit sur mesure.
                </div>
            }


            <h6>Disposition (vue en coupe)</h6>
            <div style="max-width: 90vw; overflow-x: auto;">
                 @if (_conduitType == "chemin" && _selectedTray != null)
                 {
                    <svg viewBox="0 0 @(_svgWidth.ToString("0")) @(_svgHeight.ToString("0"))"
                        style="width:@(_svgWidth.ToString("0"))px; height:@(_svgHeight.ToString("0"))px; border:2px solid #000000; background:#d3e3f2">
                        @{
                            var cablesToDraw = _cables
                                .Where(c => c.Quantity > 0 && c.DiameterMm > 0)
                                .SelectMany(c => Enumerable.Repeat(c, c.Quantity))
                                .ToList();
                            double yMargin = 10;
                            double xMargin = 10;
                            double spacingX = 5;
                            double spacingY = 10;
                            double posX = xMargin;
                            double posY = yMargin;
                            double lineHeight = _maxCableDiameter + spacingY;
                            int couche = 0;

                            foreach (var cable in cablesToDraw)
                            {
                                if (posX + cable.DiameterMm > _svgWidth - xMargin)
                                {
                                    posX = xMargin;
                                    posY += lineHeight;
                                    couche++;
                                }
                                if (couche >= _nombreCouches)
                                    break;
                                if (posY + cable.DiameterMm > _svgHeight - yMargin)
                                    break;

                                <circle cx="@posX"
                                        cy="@(posY + cable.DiameterMm / 2)"
                                        r="@(cable.DiameterMm / 2)"
                                        fill="@GetCableColor(cable.Type)"
                                        stroke="#000" stroke-width="0.5" />
                                posX += cable.DiameterMm + spacingX;
                            }
                        }
                    </svg>
                 }
                else if (_conduitType == "fourreau" && _selectedFourreau != null)
                {
                    <svg viewBox="0 0 @(_svgWidth.ToString("0")) @(_svgHeight.ToString("0"))"
                         style="width:@(_svgWidth.ToString("0"))px; height:@(_svgHeight.ToString("0"))px; border:2px solid #000000; background:#e6f2d3">
                        <circle cx="@(_svgWidth/2)" cy="@(_svgHeight/2)" r="@(_svgWidth/2-2)" fill="#fff" stroke="#000" stroke-width="2"/>
                        @{
                            var cablesToDraw = _cables
                                .Where(c => c.Quantity > 0 && c.DiameterMm > 0)
                                .SelectMany(c => Enumerable.Repeat(c, c.Quantity))
                                .ToList();
                            // Placement circulaire simple
                            int n = cablesToDraw.Count;
                            double R = (_svgWidth / 2) - (_maxCableDiameter / 2) - 4;
                            double centerX = _svgWidth / 2;
                            double centerY = _svgHeight / 2;
                            for (int i = 0; i < n; i++)
                            {
                                var cable = cablesToDraw[i];
                                double angle = 2 * Math.PI * i / n;
                                double cx = centerX + R * Math.Cos(angle);
                                double cy = centerY + R * Math.Sin(angle);
                                <circle cx="@cx"
                                        cy="@cy"
                                        r="@(cable.DiameterMm / 2)"
                                        fill="@GetCableColor(cable.Type)"
                                        stroke="#000" stroke-width="0.5" />
                            }
                        }
                    </svg>
                }
            </div>

            <div class="mt-2">
                <small>
                    Largeur Niedax : <b>@_svgWidth mm</b> &nbsp;|&nbsp;
                    Hauteur Niedax : <b>@_svgHeight mm</b>
                </small>
            </div>
            <div class="mt-3">
                <h6>Légende</h6>
                <div style="display: flex; flex-wrap: wrap; gap: 16px;">
                    @foreach (var type in _cables.Where(c => !string.IsNullOrEmpty(c.Type)).Select(c => c.Type).Distinct())
                    {
                        <div style="display: flex; align-items: center; gap: 6px;">
                            <svg width="18" height="18">
                                <circle cx="9" cy="9" r="8" fill="@GetCableColor(type)" stroke="#000" stroke-width="0.5"/>
                            </svg>
                            <span>@type</span>
                        </div>
                    }
                </div>
            </div>

        </div>
    }
}

@code {
    private string _conduitType = "chemin";
    // Modèles pour le JSON
    public class CableReference
    {
        public string Designation { get; set; } = string.Empty;
        public double DiameterMm { get; set; }
    }
    public class CableType
    {
        public string Type { get; set; } = string.Empty;
        public List<CableReference>? References { get; set; }
    }
    public class SelectedCable
    {
        public string Type { get; set; } = string.Empty;
        public string Designation { get; set; } = string.Empty;
        public double DiameterMm { get; set; }
        public int Quantity { get; set; } = 1;
    }
    public class NiedaxTray
    {
        public int Width { get; set; }
        public int Height { get; set; }
        public double SectionUtilisable => (Width * Height * 0.6) / 100.0; // 60% de remplissage max
    }
    public class Fourreau
    {
        public double DiametreMm { get; set; }
        public double SectionUtilisable => Math.PI * Math.Pow(DiametreMm / 2, 2) * 0.4 / 100; // 40% de remplissage max, en cm²
    }
    private readonly List<Fourreau> _fourreaux = new()
    {
        new() { DiametreMm = 20 },
        new() { DiametreMm = 25 },
        new() { DiametreMm = 32 },
        new() { DiametreMm = 40 },
        new() { DiametreMm = 50 },
        new() { DiametreMm = 63 },
        new() { DiametreMm = 75 },
        new() { DiametreMm = 90 },
        new() { DiametreMm = 110 },
        new() { DiametreMm = 160 }
    };
    private Fourreau? _selectedFourreau;

    private List<CableType>? _cableTypes;
    private List<SelectedCable> _cables = new() { new SelectedCable() };
    private double _occupancy;
    private double _adjustedOccupancy;
    private int _nombreCouches = 1;
    private double _svgWidth = 100;
    private double _svgHeight = 54;
    private double _maxCableDiameter = 10;
    private double _reservePercent = 20;
    private NiedaxTray? _selectedTray;

    // Palette de couleurs par type de câble (à adapter à tes types réels)
    private readonly Dictionary<string, string> _typeColors = new()
    {
        { "Instrumentation", "#0dadfd" }, // Bleu
        { "U-1000 R2V", "#de892f" }, // Orange
        { "H07 RN-F", "#de892f" }, // Orange
        { "U-1000 AR2V", "#858383" }, // Gris
        { "U-1000 RVFV RH", "#de892f" }, // Orange
        { "Ethernet (RJ45)", "#198754" }, // Vert
        { "U-1000 AR2V\nmonoconducteurs torsadés\n", "#ffc107" }, // Jaune
        // Ajoute d'autres types si besoin
    };
    private string GetCableColor(string type) => _typeColors.TryGetValue(type, out var color) ? color : "#6c757d";

    // Dimensions standards Niedax (extraites du catalogue)
    private readonly List<NiedaxTray> _niedaxTrays = new()
    {
        //new() { Width = 50, Height = 30 },
        //new() { Width = 75, Height = 30 },
        //new() { Width = 100, Height = 30 },
        new() { Width = 50, Height = 54 },
        new() { Width = 100, Height = 54 },
        new() { Width = 150, Height = 54 },
        new() { Width = 200, Height = 54 },
        new() { Width = 300, Height = 54 },
        new() { Width = 400, Height = 54 },
        new() { Width = 500, Height = 54 },
        new() { Width = 600, Height = 54 }
    };

    protected override async Task OnInitializedAsync()
    {
        _cableTypes = await Http.GetFromJsonAsync<List<CableType>>("sample-data/Cable.json");
    }

    private void AjouterCable()
    {
        _cables.Add(new SelectedCable());
    }

    private void SupprimerCable(int idx)
    {
        if (_cables.Count > 1)
            _cables.RemoveAt(idx);
    }

    private void OnTypeChanged(ChangeEventArgs e, int idx)
    {
        var type = e.Value?.ToString();
        _cables[idx].Type = type!;
        _cables[idx].Designation = null!;
        _cables[idx].DiameterMm = 0;
    }

    private void OnReferenceChanged(ChangeEventArgs e, int idx)
    {
        var designation = e.Value?.ToString();
        _cables[idx].Designation = designation!;
        var cableType = _cableTypes?.FirstOrDefault(t => t.Type == _cables[idx].Type);
        var reference = cableType?.References?.FirstOrDefault(r => r.Designation == designation);
        _cables[idx].DiameterMm = reference?.DiameterMm ?? 0;
    }

    private void CalculerEncombrement()
    {
        var facteurCouche = _nombreCouches switch
        {
            1 => 1.00,
            2 => 0.80,
            3 => 0.73,
            _ => 0.70
        };

        _occupancy = _cables
                .Where(c => c.Quantity > 0 && c.DiameterMm > 0)
                .Sum(c => Math.Pow(c.DiameterMm, 2) * c.Quantity)
            * facteurCouche / 100;

        _adjustedOccupancy = _occupancy * (1 + _reservePercent / 100.0);

        if (_conduitType == "chemin")
        {
            _selectedTray = _niedaxTrays
                .Where(t => t.SectionUtilisable >= _adjustedOccupancy)
                .OrderBy(t => t.SectionUtilisable)
                .FirstOrDefault();
            _selectedFourreau = null;

            if (_selectedTray != null)
            {
                _svgWidth = _selectedTray.Width;
                _svgHeight = _selectedTray.Height;
            }
        }
        else if (_conduitType == "fourreau")
        {
            _selectedFourreau = _fourreaux
                .Where(f => f.SectionUtilisable >= _adjustedOccupancy)
                .OrderBy(f => f.SectionUtilisable)
                .FirstOrDefault();
            _selectedTray = null;

            if (_selectedFourreau != null)
            {
                _svgWidth = _selectedFourreau.DiametreMm;
                _svgHeight = _selectedFourreau.DiametreMm;
            }
        }

        _maxCableDiameter = _cables.Where(c => c.Quantity > 0 && c.DiameterMm > 0)
            .Select(c => c.DiameterMm).DefaultIfEmpty(10).Max();
    }

}
